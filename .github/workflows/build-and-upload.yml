name: Build and Upload DEB Package

on:
  push:
    branches:
      - main
    tags:
      - 'Release-*'
  
permissions:
  contents: write

jobs:
  build:
    if: github.ref != 'refs/pull/develop'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}  # Output the VERSION variable

    steps:
    - name: Install GitHub CLI
      run: sudo apt-get install -y gh

    - name: Checkout repository
      uses: actions/checkout@v3
      with:
         fetch-depth: 0  # Fetch all history and tags

    - name: Set up CMake
      uses: lukka/get-cmake@latest

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build libasound2-dev libfmt-dev libspdlog-dev

    - name: Get version from Git tags
      id: get_version
      run: |
        # Get the latest Release tag
        LATEST_TAG=$(git describe --tags --match "Release-*" --abbrev=0)
        if [ -z "$LATEST_TAG" ]; then
          echo "No Release tag found. Using default version."
          echo "VERSION=1.0.0" >> $GITHUB_OUTPUT
          exit 0
        fi
        echo "LATEST_TAG: $LATEST_TAG"
        # Extract version number from the tag (e.g., Release-1.0.1 -> 1.0.1)
        VERSION_NUMBER=$(echo "$LATEST_TAG" | sed 's/^Release-//')
        echo "VERSION_NUMBER: $VERSION_NUMBER"
        # Get the distance since the latest tag
        DISTANCE=$(git rev-list --count "$LATEST_TAG"..HEAD)
        echo "DISTANCE: $DISTANCE"
        # Append -RC<distance> and increment third version number if distance is greater than 0
        if [ "$DISTANCE" -gt 0 ]; then
          # Increment the third number
          VERSION_NUMBER=$(echo "$VERSION_NUMBER" | awk -F. -v OFS=. '{$3++; print}')
          # Add RC info
          DISTANCE=$(printf "%03d" "$DISTANCE")
          VERSION="$VERSION_NUMBER-RC$DISTANCE"
        else
          VERSION="$VERSION_NUMBER"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Using version: $VERSION"

    - name: Configure CMake
      run: cmake -G Ninja -B build -DCPACK_PKG_VERSION=${{ steps.get_version.outputs.VERSION }}

    - name: Build with Ninja
      run: cmake --build build

    - name: Package with CPack
      run: cmake --build build --target package

    - name: Verify DEB package
      run: |
        dpkg -c build/*.deb

    - name: Upload DEB package to GitHub Packages
      uses: actions/upload-artifact@v4
      with:
        name: AudioTest-deb
        path: build/*.deb
        overwrite: true

  publish:
    if: github.ref != 'refs/pull/develop'
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Download DEB package
      uses: actions/download-artifact@v4
      with:
        name: AudioTest-deb
        path: build

    - name: Create Release
      run: |
        VERS=${{ needs.build.outputs.version }}
        echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
        gh release create "$VERS" build/*.deb --title "AudioTest $VERS" --notes "Release of AudioTest $VERS"
